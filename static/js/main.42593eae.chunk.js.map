{"version":3,"sources":["components/EmployeeContext.js","hooks/API.js","components/Button.js","components/Table.js","components/Search.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["EmployeeContext","createContext","useGet","url","useContext","employees","setEmployees","displayedEmployees","setDisplayedEmployees","useEffect","a","axios","get","response","data","results","console","log","getEmployees","sortFunction","sort","b","name","first","dob","age","Button","children","className","Table","onClick","map","employee","key","login","uuid","src","picture","medium","alt","last","gender","email","phone","Search","useState","search","setSearch","type","onChange","searchTerm","target","value","filterResults","filter","toLowerCase","indexOf","Navbar","App","Provider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.42593eae.chunk.js","sourcesContent":["import { createContext } from \"react\";\r\n\r\nexport const EmployeeContext = createContext(\"null\");\r\n","import axios from \"axios\";\r\nimport { useEffect, useContext } from \"react\";\r\nimport { EmployeeContext } from \"../components/EmployeeContext\";\r\n\r\nexport function useGet(url) {\r\n  const {\r\n    employees,\r\n    setEmployees,\r\n    displayedEmployees,\r\n    setDisplayedEmployees,\r\n  } = useContext(EmployeeContext);\r\n\r\n  useEffect(() => {\r\n    async function getEmployees() {\r\n      try {\r\n        const response = await axios.get(\r\n          \"https://randomuser.me/api/?results=100&nat=us\"\r\n        );\r\n        setEmployees(response.data.results);\r\n        setDisplayedEmployees(response.data.results);\r\n      } catch (error) {\r\n        console.log(\"There was an error fetching data from the API: \", error);\r\n      }\r\n    }\r\n    getEmployees();\r\n  }, []);\r\n\r\n  function sortFunction(sort) {\r\n    switch (sort) {\r\n      case \"name\":\r\n        sortByFirst();\r\n        break;\r\n      case \"age\":\r\n        sortByAge();\r\n        break;\r\n      default:\r\n    }\r\n  }\r\n\r\n  function sortByFirst() {\r\n    employees.sort(function (a, b) {\r\n      if (a.name.first < b.name.first) {\r\n        return -1;\r\n      } else {\r\n        return 1;\r\n      }\r\n    });\r\n\r\n    setDisplayedEmployees([...employees]);\r\n  }\r\n\r\n  function sortByAge() {\r\n    employees.sort(function (a, b) {\r\n      return a.dob.age - b.dob.age;\r\n    });\r\n    setDisplayedEmployees([...employees]);\r\n  }\r\n\r\n  return { displayedEmployees, sortFunction };\r\n}\r\n","import React from \"react\";\r\n\r\nfunction Button({ children }) {\r\n  return <button className=\"Button btn btn-secondary\">{children}</button>;\r\n}\r\n\r\nexport default Button;\r\n","import React, { useContext } from \"react\";\r\nimport { useGet } from \"../hooks/API.js\";\r\nimport \"./Table.css\";\r\nimport { EmployeeContext } from \"./EmployeeContext.js\";\r\nimport Button from \"./Button.js\";\r\n\r\nfunction Table() {\r\n  const { sortFunction } = useGet(\"https://randomuser.me/api/?results=100\");\r\n  const { displayedEmployees } = useContext(EmployeeContext);\r\n\r\n  return (\r\n    <table>\r\n      <thead className=\"thead-height\">\r\n        <tr>\r\n          <td>Picture</td>\r\n          <td onClick={() => sortFunction(\"name\")}>\r\n            <Button>First Name</Button>\r\n          </td>\r\n          <td>Last Name</td>\r\n          <td>Gender</td>\r\n          <td>E-mail Address</td>\r\n          <td>Phone Number</td>\r\n          <td onClick={() => sortFunction(\"age\")}>\r\n            <Button>Age</Button>\r\n          </td>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {displayedEmployees.map((employee) => {\r\n          return (\r\n            <tr key={employee.login.uuid}>\r\n              <td>\r\n                <img src={employee.picture.medium} alt=\"user portrait\" />\r\n              </td>\r\n              <td>{employee.name.first}</td>\r\n              <td>{employee.name.last}</td>\r\n              <td>{employee.gender}</td>\r\n              <td>{employee.email}</td>\r\n              <td>{employee.phone}</td>\r\n              <td>{employee.dob.age}</td>\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </table>\r\n  );\r\n}\r\nexport default Table;\r\n","import React, { useState, useContext } from \"react\";\r\nimport { EmployeeContext } from \"./EmployeeContext.js\";\r\nimport \"./Search.css\";\r\n\r\nfunction Search() {\r\n  const { employees, setDisplayedEmployees } = useContext(EmployeeContext);\r\n  const [search, setSearch] = useState(\"\");\r\n\r\n  function updateSearch({ target }) {\r\n    const searchTerm = target.value;\r\n    setSearch(searchTerm);\r\n    const filterResults = employees.filter(function (employee) {\r\n      return employee.name.first\r\n        .toLowerCase()\r\n        .indexOf(searchTerm.toLowerCase()) !== -1\r\n        ? true\r\n        : false;\r\n    });\r\n    setDisplayedEmployees([...filterResults]);\r\n  }\r\n  return <input type=\"text\" onChange={updateSearch} value={search}></input>;\r\n}\r\nexport default Search;\r\n","import React from \"react\";\r\nimport Search from \"./Search.js\";\r\nimport \"./Header.css\";\r\n\r\nfunction Navbar() {\r\n  return (\r\n    <div className=\"jumbotron\">\r\n      <div className=\"justify-content-center bold title\">\r\n        Employee Directory\r\n      </div>\r\n      <div className=\"justify-content-center\">\r\n        <div className=\"bold\">Search for Employee by First Name: </div>\r\n        <Search />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default Navbar;\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { EmployeeContext } from \"./components/EmployeeContext\";\nimport Table from \"./components/Table\";\nimport Navbar from \"./components/Header\";\n\nfunction App() {\n  const [employees, setEmployees] = useState([]);\n  const [displayedEmployees, setDisplayedEmployees] = useState([]);\n\n  return (\n    <div className=\"App\">\n      <EmployeeContext.Provider\n        value={{\n          employees,\n          setEmployees,\n          displayedEmployees,\n          setDisplayedEmployees,\n        }}\n      >\n        <Navbar />\n        <Table />\n      </EmployeeContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}